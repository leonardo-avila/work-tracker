name: deploy

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  sonar:
    name: Sonar Analysis
    runs-on: windows-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"leonardo-avila_food-totem-catalog" /o:"leonardo-avila" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths="**\TestResults\*\*.xml"
          dotnet build ./src
          dotnet test ./src --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Docker Setup QEMU
      if: github.ref == 'refs/heads/main'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: amd64,arm64
    - name: Set-up Docker Buildx
      if: github.ref == 'refs/heads/main'
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v3
      with:
        context: src
        file: src/Dockerfile
        platforms: linux/amd64,linux/arm64/v8
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/work-tracker-api:latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.LAB_ACCOUNT_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
  
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/terraform

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve
      working-directory: ./infra/terraform
      env:
        TF_VAR_lab_account_id: ${{ secrets.LAB_ACCOUNT_ID }}
        TF_VAR_lab_account_region: ${{ secrets.LAB_ACCOUNT_REGION }}
        TF_VAR_work_tracker_image: ${{ secrets.WORKTRACKER_IMAGE }}
        TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
        TF_VAR_mysql_user: ${{ secrets.MYSQL_USER }}